Data
The trips table has the following fields, which will be important for you to understand moving forward.

id - uniquely identifies the trip
vendor_id - the taxi cab company - in our case study we have data from three different cab companies
pickup_datetime - the time stamp for pickup
dropoff_datetime - the time stamp for drop-off
passenger_count - the number of passengers for the trip
trip_distance - total distance of the trip in miles
pickup_longitude - the longitude for pickup
pickup_latitude - the latitude for pickup
dropoff_longitude - the longitude of dropoff
dropoff_latitude - the latitude of dropoff
payment_type - a numeric code signifying how the passenger paid for the trip
1=Credit card
2=Cash
3=No charge
4=Dispute
5=Unknown
6=Voided
trip_duration - this is the duration we would like to predict using other fields
pickup_neighborhood - a one or two letter id of the neighboorhood where the trip started
dropoff_neighborhood - a one or two letter id of the neighboorhood where the trip ended
See the Data section of your notebook and follow the instructions to load the NYC taxi trip data.

Entities and Relationships
An entity is a component of our dataset. A relationship is some connection between 2 or more entities.

We have the following 3 entities:

trips
pickup_neighborhoods
dropoff_neighborhoods
And we also have the following 2 relationships:

pickup_neighborhoods -> trips: One neighborhood can have multiple trips that start in it. This means pickup_neighborhoods is the parent_entity and trips is the child_entity.
dropoff_neighborhoods -> trips: One neighborhood can have multiple trips that end in it. This means dropoff_neighborhoods is the parent_entity and trips is the child_entity.
See the Entities and Relationships section of your notebook and follow the instructions to create these objects, which we will use later in our feature analysis.

Transform Primitives
Instead of manually creating features, such as “month of pickup datetime”, we can let DFS come up with them automatically. It does this by:

interpreting the variable types of the columns e.g categorical, numeric and others
matching the columns to the primitives that can be applied to their variable types
creating features based on these matches
Features fall into two major categories: transform and aggregate. In featureools, we can create transform features by specifying transform primitives. Below we specify a transform primitive called weekend. This is how it works:

It can be applied to any datetime column in the data.
For each entry in the column, it determines if it is a weekend and returns a boolean.
In this specific data, there are two datetime columns: pickup_datetime and dropoff_datetime. The tool automatically creates features using the primitive and these two columns.

See the Transform Primitives section of your notebook and follow the instructions to create this new weekend feature.

First Model
Now, we can build a model to predict our target variable given our new feature matrix. To build a model, we:

Seperate the data into a porition for training (75% in this case) and a portion for testing
Get the log of the trip duration so that a more linear relationship can be found
Train a model using a GradientBoostingRegressor
See the First Model section of your notebook and follow the instructions to create, train and evaluate our first model of the case study.

More Transform Primitives
Now, we can ddd Minute, Hour, Week, Month and Weekday primitives. All of these transform primitives apply to datetime columns.

See the More Transform Primitives section of your notebook and follow the instructions to create these new features and evaluate the new model performance.

Aggregation Primitives
As described above, the second type of feature we consider here is an aggregate feature, where we compute some function across an entire feature column in our dataset and include that value in our feature matrix.

Let’s add some of these aggregation primitives. These primitives will generate features for the parent entities pickup_neighborhoods, and dropoff_neighborhood and then add them to the trips entity, which is the entity for which we are trying to make prediction.

See the Aggregation Primitives section of your notebook and follow the instructions to create these new features and evaluate the new model performance.

Evaluate on Test Data
Now, we want to actually predict the trip durations of our test set. 

Feature Importance
Finally, let’s look at how important each feature was for the model. .